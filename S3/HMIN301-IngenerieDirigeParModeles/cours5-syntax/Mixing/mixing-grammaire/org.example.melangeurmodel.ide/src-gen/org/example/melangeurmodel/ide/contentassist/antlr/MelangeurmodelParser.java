/*
 * generated by Xtext 2.23.0
 */
package org.example.melangeurmodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.melangeurmodel.ide.contentassist.antlr.internal.InternalMelangeurmodelParser;
import org.example.melangeurmodel.services.MelangeurmodelGrammarAccess;

public class MelangeurmodelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MelangeurmodelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MelangeurmodelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getMoveAccess().getTypeAlternatives_1_2_0(), "rule__Move__TypeAlternatives_1_2_0");
			builder.put(grammarAccess.getMoveAccess().getFilterAlternatives_7_2_0(), "rule__Move__FilterAlternatives_7_2_0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_1(), "rule__Move__Group_1__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_2(), "rule__Move__Group_2__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_7(), "rule__Move__Group_7__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_8(), "rule__Move__Group_8__0");
			builder.put(grammarAccess.getDatatypeAccess().getGroup(), "rule__Datatype__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getCupAccess().getGroup(), "rule__Cup__Group__0");
			builder.put(grammarAccess.getCleanAccess().getGroup(), "rule__Clean__Group__0");
			builder.put(grammarAccess.getModelAccess().getInstructionAssignment(), "rule__Model__InstructionAssignment");
			builder.put(grammarAccess.getMoveAccess().getMoveAssignment_0(), "rule__Move__MoveAssignment_0");
			builder.put(grammarAccess.getMoveAccess().getTypeAssignment_1_2(), "rule__Move__TypeAssignment_1_2");
			builder.put(grammarAccess.getMoveAccess().getQtyCupAssignment_1_3(), "rule__Move__QtyCupAssignment_1_3");
			builder.put(grammarAccess.getMoveAccess().getQtyAssignment_2_0(), "rule__Move__QtyAssignment_2_0");
			builder.put(grammarAccess.getMoveAccess().getFromAssignment_4(), "rule__Move__FromAssignment_4");
			builder.put(grammarAccess.getMoveAccess().getToAssignment_6(), "rule__Move__ToAssignment_6");
			builder.put(grammarAccess.getMoveAccess().getFilterAssignment_7_2(), "rule__Move__FilterAssignment_7_2");
			builder.put(grammarAccess.getMoveAccess().getTimeAssignment_8_3(), "rule__Move__TimeAssignment_8_3");
			builder.put(grammarAccess.getDatatypeAccess().getNameAssignment_1(), "rule__Datatype__NameAssignment_1");
			builder.put(grammarAccess.getDatatypeAccess().getVarnameAssignment_2(), "rule__Datatype__VarnameAssignment_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getCupAccess().getNrAssignment_1(), "rule__Cup__NrAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MelangeurmodelGrammarAccess grammarAccess;

	@Override
	protected InternalMelangeurmodelParser createParser() {
		InternalMelangeurmodelParser result = new InternalMelangeurmodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MelangeurmodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MelangeurmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
