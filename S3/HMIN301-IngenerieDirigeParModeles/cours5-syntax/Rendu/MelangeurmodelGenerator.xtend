/*
 * generated by Xtext 2.23.0
 */
package org.example.melangeurmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.melangeurmodel.melangeurmodel.Model
import org.example.melangeurmodel.melangeurmodel.Instruction
import org.example.melangeurmodel.melangeurmodel.Move
import org.example.melangeurmodel.melangeurmodel.Clean
import org.example.melangeurmodel.melangeurmodel.Datatype

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MelangeurmodelGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			fsa.generateFile('ExampleMixingMachine.java', 
			resource.allContents
				.filter(Model).head.compile())
	}
	
	def String compile(Model model){
		return '''
			import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;
			public class ExampleMixingMachine extends SVGMixingMachine {

				public int run() {
					«FOR instruction : model.instruction»
						«instruction.compile»
					«ENDFOR»
					return 0;
				}
				public static void main(String[] args) throws Exception {
					ExampleMixingMachine exampleMixingMachine = new ExampleMixingMachine();
					for (int i = 1; i <= exampleMixingMachine.getInputCups(); ++i) {
						exampleMixingMachine.setAtInputCup(i, 9);
					}
					exampleMixingMachine.run();
				}
			}''';
	}
	
	def String compile(Instruction i){
		return switch i {
			Move:
				(i as Move).compile
			Datatype:
				(i as Datatype).compile
			default: '''
				// Unexpected «i.eClass.name»
			'''
		}
	}
	
	def String compile(Move m){
		return '''«»
		«IF m.from.nr < 4»
		open(0);
		move(«m.from.nr - 5»);
		«IF m.type == 'less'»if(scan() < «m.qtyCup») return -1; «ENDIF»
		«IF m.type == 'more'»if(scan() > «m.qtyCup») return -1; «ENDIF»
		«IF m.type == 'equal'»if(scan() == «m.qtyCup») return -1; «ENDIF»
		«IF m.type == 'diff'»if(scan() != «m.qtyCup») return -1; «ENDIF»
		«IF m.filter == 'A'»filt(1);«ELSEIF m.filter === 'B'» filt(2);«ENDIF»suck(«m.qty»);move(«m.to.nr - m.from.nr»);«IF m.filter == 'A' || m.filter == 'B'»filt(0);«ENDIF»blow(«m.qty»);
		shut(0);
		«IF m.time > 0»wait(«m.time»);«ENDIF»
		move(«4 - m.to.nr »);suck(30);move(1);blow(30);
		«ELSEIF m.from.nr > 10 »
		open(1);
		move(«m.from.nr - 5»);suck(«m.qty»);move(«m.to.nr - m.from.nr»);blow(«m.qty»);
		shut(1);
		move(«m.to.nr - 5»);suck(30);move(1);blow(30);
		«ELSE»
		move(«m.from.nr - 5»);
		«IF m.type == 'less'»if(scan() < «m.qty») return -1; «ENDIF»
		«IF m.type == 'more'»if(scan() > «m.qty») return -1; «ENDIF»
		«IF m.type == 'equal'»if(scan() == «m.qty») return -1; «ENDIF»
		«IF m.type == 'diff'»if(scan() != «m.qty») return -1; «ENDIF»
		«IF m.filter == 'A'»filt(1);«ELSEIF m.filter === 'B'» filt(2);«ENDIF»suck(«m.qty»);move(«m.to.nr - m.from.nr»);«IF m.filter == 'A' || m.filter == 'B'»filt(0);«ENDIF»blow(«m.qty»);
		«IF m.time > 0»wait(«m.time»);«ENDIF»
		move(«5 - m.to.nr + 5 - m.from.nr + 1»);suck(30);move(1);blow(30);
		«ENDIF»		
		'''
	
	}
	
	def String compile(Datatype d){
		return '''
		«d.name» «d.varname.name» ;
		'''
	}
}
