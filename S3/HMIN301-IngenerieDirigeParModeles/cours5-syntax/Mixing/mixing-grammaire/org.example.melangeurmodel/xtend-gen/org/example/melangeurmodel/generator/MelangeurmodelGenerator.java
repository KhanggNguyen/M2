/**
 * generated by Xtext 2.23.0
 */
package org.example.melangeurmodel.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.example.melangeurmodel.melangeurmodel.Datatype;
import org.example.melangeurmodel.melangeurmodel.Instruction;
import org.example.melangeurmodel.melangeurmodel.Model;
import org.example.melangeurmodel.melangeurmodel.Move;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MelangeurmodelGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("ExampleMixingMachine.java", 
      this.compile(IteratorExtensions.<Model>head(Iterators.<Model>filter(resource.getAllContents(), Model.class))));
  }
  
  public String compile(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;");
    _builder.newLine();
    _builder.append("public class ExampleMixingMachine extends SVGMixingMachine {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int run() {");
    _builder.newLine();
    {
      EList<Instruction> _instruction = model.getInstruction();
      for(final Instruction instruction : _instruction) {
        _builder.append("\t\t");
        String _compile = this.compile(instruction);
        _builder.append(_compile, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ExampleMixingMachine exampleMixingMachine = new ExampleMixingMachine();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 1; i <= exampleMixingMachine.getInputCups(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exampleMixingMachine.setAtInputCup(i, 9);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exampleMixingMachine.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder.toString();
  }
  
  public String compile(final Instruction i) {
    String _switchResult = null;
    boolean _matched = false;
    if (i instanceof Move) {
      _matched=true;
      _switchResult = this.compile(((Move) i));
    }
    if (!_matched) {
      if (i instanceof Datatype) {
        _matched=true;
        _switchResult = this.compile(((Datatype) i));
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// Unexpected ");
      String _name = i.eClass().getName();
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public String compile(final Move m) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _nr = m.getFrom().getNr();
      boolean _lessThan = (_nr < 4);
      if (_lessThan) {
        _builder.append("open(0);");
        _builder.newLine();
        _builder.append("move(");
        int _nr_1 = m.getFrom().getNr();
        int _minus = (_nr_1 - 5);
        _builder.append(_minus);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        {
          String _type = m.getType();
          boolean _equals = Objects.equal(_type, "less");
          if (_equals) {
            _builder.append("if(scan() < ");
            int _qtyCup = m.getQtyCup();
            _builder.append(_qtyCup);
            _builder.append(") return -1; ");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          String _type_1 = m.getType();
          boolean _equals_1 = Objects.equal(_type_1, "more");
          if (_equals_1) {
            _builder.append("if(scan() > ");
            int _qtyCup_1 = m.getQtyCup();
            _builder.append(_qtyCup_1);
            _builder.append(") return -1; ");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          String _type_2 = m.getType();
          boolean _equals_2 = Objects.equal(_type_2, "equal");
          if (_equals_2) {
            _builder.append("if(scan() == ");
            int _qtyCup_2 = m.getQtyCup();
            _builder.append(_qtyCup_2);
            _builder.append(") return -1; ");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          String _type_3 = m.getType();
          boolean _equals_3 = Objects.equal(_type_3, "diff");
          if (_equals_3) {
            _builder.append("if(scan() != ");
            int _qtyCup_3 = m.getQtyCup();
            _builder.append(_qtyCup_3);
            _builder.append(") return -1; ");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          String _filter = m.getFilter();
          boolean _equals_4 = Objects.equal(_filter, "A");
          if (_equals_4) {
            _builder.append("filt(1);");
          } else {
            String _filter_1 = m.getFilter();
            boolean _tripleEquals = (_filter_1 == "B");
            if (_tripleEquals) {
              _builder.append(" filt(2);");
            }
          }
        }
        _builder.append("suck(");
        int _qty = m.getQty();
        _builder.append(_qty);
        _builder.append(");move(");
        int _nr_2 = m.getTo().getNr();
        int _nr_3 = m.getFrom().getNr();
        int _minus_1 = (_nr_2 - _nr_3);
        _builder.append(_minus_1);
        _builder.append(");");
        {
          if ((Objects.equal(m.getFilter(), "A") || Objects.equal(m.getFilter(), "B"))) {
            _builder.append("filt(0);");
          }
        }
        _builder.append("blow(");
        int _qty_1 = m.getQty();
        _builder.append(_qty_1);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("shut(0);");
        _builder.newLine();
        {
          int _time = m.getTime();
          boolean _greaterThan = (_time > 0);
          if (_greaterThan) {
            _builder.append("wait(");
            int _time_1 = m.getTime();
            _builder.append(_time_1);
            _builder.append(");");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("move(");
        int _nr_4 = m.getTo().getNr();
        int _minus_2 = (4 - _nr_4);
        _builder.append(_minus_2);
        _builder.append(");suck(30);move(1);blow(30);");
        _builder.newLineIfNotEmpty();
      } else {
        int _nr_5 = m.getFrom().getNr();
        boolean _greaterThan_1 = (_nr_5 > 10);
        if (_greaterThan_1) {
          _builder.append("open(1);");
          _builder.newLine();
          _builder.append("move(");
          int _nr_6 = m.getFrom().getNr();
          int _minus_3 = (_nr_6 - 5);
          _builder.append(_minus_3);
          _builder.append(");suck(");
          int _qty_2 = m.getQty();
          _builder.append(_qty_2);
          _builder.append(");move(");
          int _nr_7 = m.getTo().getNr();
          int _nr_8 = m.getFrom().getNr();
          int _minus_4 = (_nr_7 - _nr_8);
          _builder.append(_minus_4);
          _builder.append(");blow(");
          int _qty_3 = m.getQty();
          _builder.append(_qty_3);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("shut(1);");
          _builder.newLine();
          _builder.append("move(");
          int _nr_9 = m.getTo().getNr();
          int _minus_5 = (_nr_9 - 5);
          _builder.append(_minus_5);
          _builder.append(");suck(30);move(1);blow(30);");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("move(");
          int _nr_10 = m.getFrom().getNr();
          int _minus_6 = (_nr_10 - 5);
          _builder.append(_minus_6);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          {
            String _type_4 = m.getType();
            boolean _equals_5 = Objects.equal(_type_4, "less");
            if (_equals_5) {
              _builder.append("if(scan() < ");
              int _qty_4 = m.getQty();
              _builder.append(_qty_4);
              _builder.append(") return -1; ");
            }
          }
          _builder.newLineIfNotEmpty();
          {
            String _type_5 = m.getType();
            boolean _equals_6 = Objects.equal(_type_5, "more");
            if (_equals_6) {
              _builder.append("if(scan() > ");
              int _qty_5 = m.getQty();
              _builder.append(_qty_5);
              _builder.append(") return -1; ");
            }
          }
          _builder.newLineIfNotEmpty();
          {
            String _type_6 = m.getType();
            boolean _equals_7 = Objects.equal(_type_6, "equal");
            if (_equals_7) {
              _builder.append("if(scan() == ");
              int _qty_6 = m.getQty();
              _builder.append(_qty_6);
              _builder.append(") return -1; ");
            }
          }
          _builder.newLineIfNotEmpty();
          {
            String _type_7 = m.getType();
            boolean _equals_8 = Objects.equal(_type_7, "diff");
            if (_equals_8) {
              _builder.append("if(scan() != ");
              int _qty_7 = m.getQty();
              _builder.append(_qty_7);
              _builder.append(") return -1; ");
            }
          }
          _builder.newLineIfNotEmpty();
          {
            String _filter_2 = m.getFilter();
            boolean _equals_9 = Objects.equal(_filter_2, "A");
            if (_equals_9) {
              _builder.append("filt(1);");
            } else {
              String _filter_3 = m.getFilter();
              boolean _tripleEquals_1 = (_filter_3 == "B");
              if (_tripleEquals_1) {
                _builder.append(" filt(2);");
              }
            }
          }
          _builder.append("suck(");
          int _qty_8 = m.getQty();
          _builder.append(_qty_8);
          _builder.append(");move(");
          int _nr_11 = m.getTo().getNr();
          int _nr_12 = m.getFrom().getNr();
          int _minus_7 = (_nr_11 - _nr_12);
          _builder.append(_minus_7);
          _builder.append(");");
          {
            if ((Objects.equal(m.getFilter(), "A") || Objects.equal(m.getFilter(), "B"))) {
              _builder.append("filt(0);");
            }
          }
          _builder.append("blow(");
          int _qty_9 = m.getQty();
          _builder.append(_qty_9);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          {
            int _time_2 = m.getTime();
            boolean _greaterThan_2 = (_time_2 > 0);
            if (_greaterThan_2) {
              _builder.append("wait(");
              int _time_3 = m.getTime();
              _builder.append(_time_3);
              _builder.append(");");
            }
          }
          _builder.newLineIfNotEmpty();
          _builder.append("move(");
          int _nr_13 = m.getTo().getNr();
          int _minus_8 = (5 - _nr_13);
          int _plus = (_minus_8 + 5);
          int _nr_14 = m.getFrom().getNr();
          int _minus_9 = (_plus - _nr_14);
          int _plus_1 = (_minus_9 + 1);
          _builder.append(_plus_1);
          _builder.append(");suck(30);move(1);blow(30);");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder.toString();
  }
  
  public String compile(final Datatype d) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = d.getName();
    _builder.append(_name);
    _builder.append(" ");
    String _name_1 = d.getVarname().getName();
    _builder.append(_name_1);
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
