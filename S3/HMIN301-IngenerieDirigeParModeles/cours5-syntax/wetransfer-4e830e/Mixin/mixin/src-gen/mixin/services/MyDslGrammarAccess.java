/*
 * generated by Xtext 2.18.0.M3
 */
package mixin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.MyDsl.Model");
		private final Assignment cInstructionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_0 = (RuleCall)cInstructionAssignment.eContents().get(0);
		
		//Model:
		//	instruction+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instruction+=Instruction*
		public Assignment getInstructionAssignment() { return cInstructionAssignment; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_0() { return cInstructionInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.MyDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruction:
		//	Move | Clean;
		@Override public ParserRule getRule() { return rule; }
		
		//Move | Clean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }
		
		//Clean
		public RuleCall getCleanParserRuleCall_1() { return cCleanParserRuleCall_1; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.MyDsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQtyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQtyINTTerminalRuleCall_1_0 = (RuleCall)cQtyAssignment_1.eContents().get(0);
		private final Keyword cMlKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromCupParserRuleCall_4_0 = (RuleCall)cFromAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToCupParserRuleCall_6_0 = (RuleCall)cToAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cFilterKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFilterAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final Alternatives cFilterAlternatives_7_2_0 = (Alternatives)cFilterAssignment_7_2.eContents().get(0);
		private final Keyword cFilterAKeyword_7_2_0_0 = (Keyword)cFilterAlternatives_7_2_0.eContents().get(0);
		private final Keyword cFilterBKeyword_7_2_0_1 = (Keyword)cFilterAlternatives_7_2_0.eContents().get(1);
		
		//Move:
		//	'move' qty=INT 'ml' 'from' from=Cup 'to' to=Cup ('with' 'filter' filter=('A' | 'B'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' qty=INT 'ml' 'from' from=Cup 'to' to=Cup ('with' 'filter' filter=('A' | 'B'))?
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//qty=INT
		public Assignment getQtyAssignment_1() { return cQtyAssignment_1; }
		
		//INT
		public RuleCall getQtyINTTerminalRuleCall_1_0() { return cQtyINTTerminalRuleCall_1_0; }
		
		//'ml'
		public Keyword getMlKeyword_2() { return cMlKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//from=Cup
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//Cup
		public RuleCall getFromCupParserRuleCall_4_0() { return cFromCupParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//to=Cup
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//Cup
		public RuleCall getToCupParserRuleCall_6_0() { return cToCupParserRuleCall_6_0; }
		
		//('with' 'filter' filter=('A' | 'B'))?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'filter'
		public Keyword getFilterKeyword_7_1() { return cFilterKeyword_7_1; }
		
		//filter=('A' | 'B')
		public Assignment getFilterAssignment_7_2() { return cFilterAssignment_7_2; }
		
		//('A' | 'B')
		public Alternatives getFilterAlternatives_7_2_0() { return cFilterAlternatives_7_2_0; }
		
		//'A'
		public Keyword getFilterAKeyword_7_2_0_0() { return cFilterAKeyword_7_2_0_0; }
		
		//'B'
		public Keyword getFilterBKeyword_7_2_0_1() { return cFilterBKeyword_7_2_0_1; }
	}
	public class CupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.MyDsl.Cup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNrINTTerminalRuleCall_1_0 = (RuleCall)cNrAssignment_1.eContents().get(0);
		
		//Cup:
		//	'cup' nr=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'cup' nr=INT
		public Group getGroup() { return cGroup; }
		
		//'cup'
		public Keyword getCupKeyword_0() { return cCupKeyword_0; }
		
		//nr=INT
		public Assignment getNrAssignment_1() { return cNrAssignment_1; }
		
		//INT
		public RuleCall getNrINTTerminalRuleCall_1_0() { return cNrINTTerminalRuleCall_1_0; }
	}
	public class CleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.MyDsl.Clean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCleanupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Clean:
		//	{Clean}
		//	'cleanup';
		@Override public ParserRule getRule() { return rule; }
		
		//{Clean} 'cleanup'
		public Group getGroup() { return cGroup; }
		
		//{Clean}
		public Action getCleanAction_0() { return cCleanAction_0; }
		
		//'cleanup'
		public Keyword getCleanupKeyword_1() { return cCleanupKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final InstructionElements pInstruction;
	private final MoveElements pMove;
	private final CupElements pCup;
	private final CleanElements pClean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInstruction = new InstructionElements();
		this.pMove = new MoveElements();
		this.pCup = new CupElements();
		this.pClean = new CleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mixin.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	instruction+=Instruction*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Instruction:
	//	Move | Clean;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Move:
	//	'move' qty=INT 'ml' 'from' from=Cup 'to' to=Cup ('with' 'filter' filter=('A' | 'B'))?;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//Cup:
	//	'cup' nr=INT;
	public CupElements getCupAccess() {
		return pCup;
	}
	
	public ParserRule getCupRule() {
		return getCupAccess().getRule();
	}
	
	//Clean:
	//	{Clean}
	//	'cleanup';
	public CleanElements getCleanAccess() {
		return pClean;
	}
	
	public ParserRule getCleanRule() {
		return getCleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
