/*
 * generated by Xtext 2.23.0
 */
package org.example.melangeurmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MelangeurmodelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Model");
		private final Assignment cInstructionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_0 = (RuleCall)cInstructionAssignment.eContents().get(0);
		
		//Model:
		//	instruction+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instruction+=Instruction*
		public Assignment getInstructionAssignment() { return cInstructionAssignment; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_0() { return cInstructionInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatatypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Instruction:
		//	Move | Clean | Datatype;
		@Override public ParserRule getRule() { return rule; }
		
		//Move | Clean | Datatype
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }
		
		//Clean
		public RuleCall getCleanParserRuleCall_1() { return cCleanParserRuleCall_1; }
		
		//Datatype
		public RuleCall getDatatypeParserRuleCall_2() { return cDatatypeParserRuleCall_2; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMoveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMoveMoveKeyword_0_0 = (Keyword)cMoveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cScanKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cTypeAlternatives_1_2_0 = (Alternatives)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cTypeLessKeyword_1_2_0_0 = (Keyword)cTypeAlternatives_1_2_0.eContents().get(0);
		private final Keyword cTypeMoreKeyword_1_2_0_1 = (Keyword)cTypeAlternatives_1_2_0.eContents().get(1);
		private final Keyword cTypeEqualKeyword_1_2_0_2 = (Keyword)cTypeAlternatives_1_2_0.eContents().get(2);
		private final Keyword cTypeDiffKeyword_1_2_0_3 = (Keyword)cTypeAlternatives_1_2_0.eContents().get(3);
		private final Assignment cQtyCupAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cQtyCupINTTerminalRuleCall_1_3_0 = (RuleCall)cQtyCupAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cQtyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cQtyINTTerminalRuleCall_2_0_0 = (RuleCall)cQtyAssignment_2_0.eContents().get(0);
		private final Keyword cMlKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromCupParserRuleCall_4_0 = (RuleCall)cFromAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToCupParserRuleCall_6_0 = (RuleCall)cToAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cFilterKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFilterAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final Alternatives cFilterAlternatives_7_2_0 = (Alternatives)cFilterAssignment_7_2.eContents().get(0);
		private final Keyword cFilterAKeyword_7_2_0_0 = (Keyword)cFilterAlternatives_7_2_0.eContents().get(0);
		private final Keyword cFilterBKeyword_7_2_0_1 = (Keyword)cFilterAlternatives_7_2_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWaitKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cBeforeKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cCleanKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cTimeAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cTimeINTTerminalRuleCall_8_3_0 = (RuleCall)cTimeAssignment_8_3.eContents().get(0);
		
		//Move:
		//	move='move' ('scan' 'if' type=('less' | 'more' | 'equal' | 'diff') qtyCup=INT)? (qty=INT 'ml')? 'from' from=Cup 'to'
		//	to=Cup ('with' 'filter' filter=('A' | 'B'))? ('wait' 'before' 'clean' time=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//move='move' ('scan' 'if' type=('less' | 'more' | 'equal' | 'diff') qtyCup=INT)? (qty=INT 'ml')? 'from' from=Cup 'to'
		//to=Cup ('with' 'filter' filter=('A' | 'B'))? ('wait' 'before' 'clean' time=INT)?
		public Group getGroup() { return cGroup; }
		
		//move='move'
		public Assignment getMoveAssignment_0() { return cMoveAssignment_0; }
		
		//'move'
		public Keyword getMoveMoveKeyword_0_0() { return cMoveMoveKeyword_0_0; }
		
		//('scan' 'if' type=('less' | 'more' | 'equal' | 'diff') qtyCup=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'scan'
		public Keyword getScanKeyword_1_0() { return cScanKeyword_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_1() { return cIfKeyword_1_1; }
		
		//type=('less' | 'more' | 'equal' | 'diff')
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//('less' | 'more' | 'equal' | 'diff')
		public Alternatives getTypeAlternatives_1_2_0() { return cTypeAlternatives_1_2_0; }
		
		//'less'
		public Keyword getTypeLessKeyword_1_2_0_0() { return cTypeLessKeyword_1_2_0_0; }
		
		//'more'
		public Keyword getTypeMoreKeyword_1_2_0_1() { return cTypeMoreKeyword_1_2_0_1; }
		
		//'equal'
		public Keyword getTypeEqualKeyword_1_2_0_2() { return cTypeEqualKeyword_1_2_0_2; }
		
		//'diff'
		public Keyword getTypeDiffKeyword_1_2_0_3() { return cTypeDiffKeyword_1_2_0_3; }
		
		//qtyCup=INT
		public Assignment getQtyCupAssignment_1_3() { return cQtyCupAssignment_1_3; }
		
		//INT
		public RuleCall getQtyCupINTTerminalRuleCall_1_3_0() { return cQtyCupINTTerminalRuleCall_1_3_0; }
		
		//(qty=INT 'ml')?
		public Group getGroup_2() { return cGroup_2; }
		
		//qty=INT
		public Assignment getQtyAssignment_2_0() { return cQtyAssignment_2_0; }
		
		//INT
		public RuleCall getQtyINTTerminalRuleCall_2_0_0() { return cQtyINTTerminalRuleCall_2_0_0; }
		
		//'ml'
		public Keyword getMlKeyword_2_1() { return cMlKeyword_2_1; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//from=Cup
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//Cup
		public RuleCall getFromCupParserRuleCall_4_0() { return cFromCupParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//to=Cup
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//Cup
		public RuleCall getToCupParserRuleCall_6_0() { return cToCupParserRuleCall_6_0; }
		
		//('with' 'filter' filter=('A' | 'B'))?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'filter'
		public Keyword getFilterKeyword_7_1() { return cFilterKeyword_7_1; }
		
		//filter=('A' | 'B')
		public Assignment getFilterAssignment_7_2() { return cFilterAssignment_7_2; }
		
		//('A' | 'B')
		public Alternatives getFilterAlternatives_7_2_0() { return cFilterAlternatives_7_2_0; }
		
		//'A'
		public Keyword getFilterAKeyword_7_2_0_0() { return cFilterAKeyword_7_2_0_0; }
		
		//'B'
		public Keyword getFilterBKeyword_7_2_0_1() { return cFilterBKeyword_7_2_0_1; }
		
		//('wait' 'before' 'clean' time=INT)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'wait'
		public Keyword getWaitKeyword_8_0() { return cWaitKeyword_8_0; }
		
		//'before'
		public Keyword getBeforeKeyword_8_1() { return cBeforeKeyword_8_1; }
		
		//'clean'
		public Keyword getCleanKeyword_8_2() { return cCleanKeyword_8_2; }
		
		//time=INT
		public Assignment getTimeAssignment_8_3() { return cTimeAssignment_8_3; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_8_3_0() { return cTimeINTTerminalRuleCall_8_3_0; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVarnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarnameVariableParserRuleCall_2_0 = (RuleCall)cVarnameAssignment_2.eContents().get(0);
		
		////exemple move 5ml from 1 to 6 with filter A
		//Datatype:
		//	'datatype' name=ID varname=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID varname=Variable
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//varname=Variable
		public Assignment getVarnameAssignment_2() { return cVarnameAssignment_2; }
		
		//Variable
		public RuleCall getVarnameVariableParserRuleCall_2_0() { return cVarnameVariableParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	'variable' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Cup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNrINTTerminalRuleCall_1_0 = (RuleCall)cNrAssignment_1.eContents().get(0);
		
		//Cup:
		//	'cup' nr=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'cup' nr=INT
		public Group getGroup() { return cGroup; }
		
		//'cup'
		public Keyword getCupKeyword_0() { return cCupKeyword_0; }
		
		//nr=INT
		public Assignment getNrAssignment_1() { return cNrAssignment_1; }
		
		//INT
		public RuleCall getNrINTTerminalRuleCall_1_0() { return cNrINTTerminalRuleCall_1_0; }
	}
	public class CleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.melangeurmodel.Melangeurmodel.Clean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCleanupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Clean:
		//	{Clean}
		//	'cleanup';
		@Override public ParserRule getRule() { return rule; }
		
		//{Clean} 'cleanup'
		public Group getGroup() { return cGroup; }
		
		//{Clean}
		public Action getCleanAction_0() { return cCleanAction_0; }
		
		//'cleanup'
		public Keyword getCleanupKeyword_1() { return cCleanupKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final InstructionElements pInstruction;
	private final MoveElements pMove;
	private final DatatypeElements pDatatype;
	private final VariableElements pVariable;
	private final CupElements pCup;
	private final CleanElements pClean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MelangeurmodelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInstruction = new InstructionElements();
		this.pMove = new MoveElements();
		this.pDatatype = new DatatypeElements();
		this.pVariable = new VariableElements();
		this.pCup = new CupElements();
		this.pClean = new CleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.melangeurmodel.Melangeurmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	instruction+=Instruction*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Instruction:
	//	Move | Clean | Datatype;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Move:
	//	move='move' ('scan' 'if' type=('less' | 'more' | 'equal' | 'diff') qtyCup=INT)? (qty=INT 'ml')? 'from' from=Cup 'to'
	//	to=Cup ('with' 'filter' filter=('A' | 'B'))? ('wait' 'before' 'clean' time=INT)?;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	////exemple move 5ml from 1 to 6 with filter A
	//Datatype:
	//	'datatype' name=ID varname=Variable;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//Variable:
	//	'variable' name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Cup:
	//	'cup' nr=INT;
	public CupElements getCupAccess() {
		return pCup;
	}
	
	public ParserRule getCupRule() {
		return getCupAccess().getRule();
	}
	
	//Clean:
	//	{Clean}
	//	'cleanup';
	public CleanElements getCleanAccess() {
		return pClean;
	}
	
	public ParserRule getCleanRule() {
		return getCleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
