/*
 * generated by Xtext 2.23.0
 */
grammar InternalMelangeurmodel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.melangeurmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.melangeurmodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.melangeurmodel.services.MelangeurmodelGrammarAccess;

}

@parser::members {

 	private MelangeurmodelGrammarAccess grammarAccess;

    public InternalMelangeurmodelParser(TokenStream input, MelangeurmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MelangeurmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getInstructionInstructionParserRuleCall_0());
			}
			lv_instruction_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"instruction",
					lv_instruction_0_0,
					"org.example.melangeurmodel.Melangeurmodel.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMoveParserRuleCall_0());
		}
		this_Move_0=ruleMove
		{
			$current = $this_Move_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1());
		}
		this_Clean_1=ruleClean
		{
			$current = $this_Clean_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getDatatypeParserRuleCall_2());
		}
		this_Datatype_2=ruleDatatype
		{
			$current = $this_Datatype_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_move_0_0='move'
				{
					newLeafNode(lv_move_0_0, grammarAccess.getMoveAccess().getMoveMoveKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed($current, "move", lv_move_0_0, "move");
				}
			)
		)
		(
			otherlv_1='scan'
			{
				newLeafNode(otherlv_1, grammarAccess.getMoveAccess().getScanKeyword_1_0());
			}
			otherlv_2='if'
			{
				newLeafNode(otherlv_2, grammarAccess.getMoveAccess().getIfKeyword_1_1());
			}
			(
				(
					(
						lv_type_3_1='less'
						{
							newLeafNode(lv_type_3_1, grammarAccess.getMoveAccess().getTypeLessKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "type", lv_type_3_1, null);
						}
						    |
						lv_type_3_2='more'
						{
							newLeafNode(lv_type_3_2, grammarAccess.getMoveAccess().getTypeMoreKeyword_1_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "type", lv_type_3_2, null);
						}
						    |
						lv_type_3_3='equal'
						{
							newLeafNode(lv_type_3_3, grammarAccess.getMoveAccess().getTypeEqualKeyword_1_2_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "type", lv_type_3_3, null);
						}
						    |
						lv_type_3_4='diff'
						{
							newLeafNode(lv_type_3_4, grammarAccess.getMoveAccess().getTypeDiffKeyword_1_2_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "type", lv_type_3_4, null);
						}
					)
				)
			)
			(
				(
					lv_qtyCup_4_0=RULE_INT
					{
						newLeafNode(lv_qtyCup_4_0, grammarAccess.getMoveAccess().getQtyCupINTTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoveRule());
						}
						setWithLastConsumed(
							$current,
							"qtyCup",
							lv_qtyCup_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				(
					lv_qty_5_0=RULE_INT
					{
						newLeafNode(lv_qty_5_0, grammarAccess.getMoveAccess().getQtyINTTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoveRule());
						}
						setWithLastConsumed(
							$current,
							"qty",
							lv_qty_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_6='ml'
			{
				newLeafNode(otherlv_6, grammarAccess.getMoveAccess().getMlKeyword_2_1());
			}
		)?
		otherlv_7='from'
		{
			newLeafNode(otherlv_7, grammarAccess.getMoveAccess().getFromKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getFromCupParserRuleCall_4_0());
				}
				lv_from_8_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"from",
						lv_from_8_0,
						"org.example.melangeurmodel.Melangeurmodel.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='to'
		{
			newLeafNode(otherlv_9, grammarAccess.getMoveAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getToCupParserRuleCall_6_0());
				}
				lv_to_10_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"to",
						lv_to_10_0,
						"org.example.melangeurmodel.Melangeurmodel.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11='with'
			{
				newLeafNode(otherlv_11, grammarAccess.getMoveAccess().getWithKeyword_7_0());
			}
			otherlv_12='filter'
			{
				newLeafNode(otherlv_12, grammarAccess.getMoveAccess().getFilterKeyword_7_1());
			}
			(
				(
					(
						lv_filter_13_1='A'
						{
							newLeafNode(lv_filter_13_1, grammarAccess.getMoveAccess().getFilterAKeyword_7_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "filter", lv_filter_13_1, null);
						}
						    |
						lv_filter_13_2='B'
						{
							newLeafNode(lv_filter_13_2, grammarAccess.getMoveAccess().getFilterBKeyword_7_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "filter", lv_filter_13_2, null);
						}
					)
				)
			)
		)?
		(
			otherlv_14='wait'
			{
				newLeafNode(otherlv_14, grammarAccess.getMoveAccess().getWaitKeyword_8_0());
			}
			otherlv_15='before'
			{
				newLeafNode(otherlv_15, grammarAccess.getMoveAccess().getBeforeKeyword_8_1());
			}
			otherlv_16='clean'
			{
				newLeafNode(otherlv_16, grammarAccess.getMoveAccess().getCleanKeyword_8_2());
			}
			(
				(
					lv_time_17_0=RULE_INT
					{
						newLeafNode(lv_time_17_0, grammarAccess.getMoveAccess().getTimeINTTerminalRuleCall_8_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoveRule());
						}
						setWithLastConsumed(
							$current,
							"time",
							lv_time_17_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDatatype
entryRuleDatatype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current; }
	EOF;

// Rule Datatype
ruleDatatype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDatatypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatatypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getVarnameVariableParserRuleCall_2_0());
				}
				lv_varname_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					set(
						$current,
						"varname",
						lv_varname_2_0,
						"org.example.melangeurmodel.Melangeurmodel.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVariableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCup
entryRuleCup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCupRule()); }
	iv_ruleCup=ruleCup
	{ $current=$iv_ruleCup.current; }
	EOF;

// Rule Cup
ruleCup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cup'
		{
			newLeafNode(otherlv_0, grammarAccess.getCupAccess().getCupKeyword_0());
		}
		(
			(
				lv_nr_1_0=RULE_INT
				{
					newLeafNode(lv_nr_1_0, grammarAccess.getCupAccess().getNrINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCupRule());
					}
					setWithLastConsumed(
						$current,
						"nr",
						lv_nr_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleClean
entryRuleClean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCleanRule()); }
	iv_ruleClean=ruleClean
	{ $current=$iv_ruleClean.current; }
	EOF;

// Rule Clean
ruleClean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCleanAccess().getCleanAction_0(),
					$current);
			}
		)
		otherlv_1='cleanup'
		{
			newLeafNode(otherlv_1, grammarAccess.getCleanAccess().getCleanupKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
