/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package mixin.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package mixin.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import mixin.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getInstructionAssignment()); }
		(rule__Model__InstructionAssignment)*
		{ after(grammarAccess.getModelAccess().getInstructionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCup
entryRuleCup
:
{ before(grammarAccess.getCupRule()); }
	 ruleCup
{ after(grammarAccess.getCupRule()); } 
	 EOF 
;

// Rule Cup
ruleCup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCupAccess().getGroup()); }
		(rule__Cup__Group__0)
		{ after(grammarAccess.getCupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClean
entryRuleClean
:
{ before(grammarAccess.getCleanRule()); }
	 ruleClean
{ after(grammarAccess.getCleanRule()); } 
	 EOF 
;

// Rule Clean
ruleClean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCleanAccess().getGroup()); }
		(rule__Clean__Group__0)
		{ after(grammarAccess.getCleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getMoveParserRuleCall_0()); }
		ruleMove
		{ after(grammarAccess.getInstructionAccess().getMoveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1()); }
		ruleClean
		{ after(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FilterAlternatives_7_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getFilterAKeyword_7_2_0_0()); }
		'A'
		{ after(grammarAccess.getMoveAccess().getFilterAKeyword_7_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveAccess().getFilterBKeyword_7_2_0_1()); }
		'B'
		{ after(grammarAccess.getMoveAccess().getFilterBKeyword_7_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
	'move'
	{ after(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
	rule__Move__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getQtyAssignment_1()); }
	(rule__Move__QtyAssignment_1)
	{ after(grammarAccess.getMoveAccess().getQtyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__2__Impl
	rule__Move__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMlKeyword_2()); }
	'ml'
	{ after(grammarAccess.getMoveAccess().getMlKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__3__Impl
	rule__Move__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFromKeyword_3()); }
	'from'
	{ after(grammarAccess.getMoveAccess().getFromKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__4__Impl
	rule__Move__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFromAssignment_4()); }
	(rule__Move__FromAssignment_4)
	{ after(grammarAccess.getMoveAccess().getFromAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__5__Impl
	rule__Move__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getToKeyword_5()); }
	'to'
	{ after(grammarAccess.getMoveAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__6__Impl
	rule__Move__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getToAssignment_6()); }
	(rule__Move__ToAssignment_6)
	{ after(grammarAccess.getMoveAccess().getToAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getGroup_7()); }
	(rule__Move__Group_7__0)?
	{ after(grammarAccess.getMoveAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_7__0__Impl
	rule__Move__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getWithKeyword_7_0()); }
	'with'
	{ after(grammarAccess.getMoveAccess().getWithKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_7__1__Impl
	rule__Move__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFilterKeyword_7_1()); }
	'filter'
	{ after(grammarAccess.getMoveAccess().getFilterKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getFilterAssignment_7_2()); }
	(rule__Move__FilterAssignment_7_2)
	{ after(grammarAccess.getMoveAccess().getFilterAssignment_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__0__Impl
	rule__Cup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getCupKeyword_0()); }
	'cup'
	{ after(grammarAccess.getCupAccess().getCupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cup__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCupAccess().getNrAssignment_1()); }
	(rule__Cup__NrAssignment_1)
	{ after(grammarAccess.getCupAccess().getNrAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clean__Group__0__Impl
	rule__Clean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCleanAccess().getCleanAction_0()); }
	()
	{ after(grammarAccess.getCleanAccess().getCleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCleanAccess().getCleanupKeyword_1()); }
	'cleanup'
	{ after(grammarAccess.getCleanAccess().getCleanupKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__InstructionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getInstructionInstructionParserRuleCall_0()); }
		ruleInstruction
		{ after(grammarAccess.getModelAccess().getInstructionInstructionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__QtyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getQtyINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveAccess().getQtyINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FromAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getFromCupParserRuleCall_4_0()); }
		ruleCup
		{ after(grammarAccess.getMoveAccess().getFromCupParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__ToAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getToCupParserRuleCall_6_0()); }
		ruleCup
		{ after(grammarAccess.getMoveAccess().getToCupParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__FilterAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getFilterAlternatives_7_2_0()); }
		(rule__Move__FilterAlternatives_7_2_0)
		{ after(grammarAccess.getMoveAccess().getFilterAlternatives_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cup__NrAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCupAccess().getNrINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCupAccess().getNrINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
