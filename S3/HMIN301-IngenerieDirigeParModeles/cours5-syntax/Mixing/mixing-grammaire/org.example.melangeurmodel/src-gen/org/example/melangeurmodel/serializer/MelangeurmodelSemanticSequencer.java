/*
 * generated by Xtext 2.23.0
 */
package org.example.melangeurmodel.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.melangeurmodel.melangeurmodel.Clean;
import org.example.melangeurmodel.melangeurmodel.Cup;
import org.example.melangeurmodel.melangeurmodel.Datatype;
import org.example.melangeurmodel.melangeurmodel.MelangeurmodelPackage;
import org.example.melangeurmodel.melangeurmodel.Model;
import org.example.melangeurmodel.melangeurmodel.Move;
import org.example.melangeurmodel.melangeurmodel.Variable;
import org.example.melangeurmodel.services.MelangeurmodelGrammarAccess;

@SuppressWarnings("all")
public class MelangeurmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MelangeurmodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MelangeurmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MelangeurmodelPackage.CLEAN:
				sequence_Clean(context, (Clean) semanticObject); 
				return; 
			case MelangeurmodelPackage.CUP:
				sequence_Cup(context, (Cup) semanticObject); 
				return; 
			case MelangeurmodelPackage.DATATYPE:
				sequence_Datatype(context, (Datatype) semanticObject); 
				return; 
			case MelangeurmodelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MelangeurmodelPackage.MOVE:
				sequence_Move(context, (Move) semanticObject); 
				return; 
			case MelangeurmodelPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Instruction returns Clean
	 *     Clean returns Clean
	 *
	 * Constraint:
	 *     {Clean}
	 */
	protected void sequence_Clean(ISerializationContext context, Clean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cup returns Cup
	 *
	 * Constraint:
	 *     nr=INT
	 */
	protected void sequence_Cup(ISerializationContext context, Cup semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MelangeurmodelPackage.Literals.CUP__NR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MelangeurmodelPackage.Literals.CUP__NR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCupAccess().getNrINTTerminalRuleCall_1_0(), semanticObject.getNr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Datatype
	 *     Datatype returns Datatype
	 *
	 * Constraint:
	 *     (name=ID varname=Variable)
	 */
	protected void sequence_Datatype(ISerializationContext context, Datatype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MelangeurmodelPackage.Literals.DATATYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MelangeurmodelPackage.Literals.DATATYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, MelangeurmodelPackage.Literals.DATATYPE__VARNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MelangeurmodelPackage.Literals.DATATYPE__VARNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDatatypeAccess().getVarnameVariableParserRuleCall_2_0(), semanticObject.getVarname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     instruction+=Instruction+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Move
	 *     Move returns Move
	 *
	 * Constraint:
	 *     (
	 *         move='move' 
	 *         ((type='less' | type='more' | type='equal' | type='diff') qtyCup=INT)? 
	 *         qty=INT? 
	 *         from=Cup 
	 *         to=Cup 
	 *         (filter='A' | filter='B')? 
	 *         time=INT?
	 *     )
	 */
	protected void sequence_Move(ISerializationContext context, Move semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MelangeurmodelPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MelangeurmodelPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
