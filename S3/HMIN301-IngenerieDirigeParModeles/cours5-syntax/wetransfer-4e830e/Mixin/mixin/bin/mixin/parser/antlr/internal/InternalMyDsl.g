/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mixin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mixin.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mixin.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getInstructionInstructionParserRuleCall_0());
			}
			lv_instruction_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"instruction",
					lv_instruction_0_0,
					"mixin.MyDsl.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMoveParserRuleCall_0());
		}
		this_Move_0=ruleMove
		{
			$current = $this_Move_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1());
		}
		this_Clean_1=ruleClean
		{
			$current = $this_Clean_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
		}
		(
			(
				lv_qty_1_0=RULE_INT
				{
					newLeafNode(lv_qty_1_0, grammarAccess.getMoveAccess().getQtyINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed(
						$current,
						"qty",
						lv_qty_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='ml'
		{
			newLeafNode(otherlv_2, grammarAccess.getMoveAccess().getMlKeyword_2());
		}
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getMoveAccess().getFromKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getFromCupParserRuleCall_4_0());
				}
				lv_from_4_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"from",
						lv_from_4_0,
						"mixin.MyDsl.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getMoveAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getToCupParserRuleCall_6_0());
				}
				lv_to_6_0=ruleCup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"to",
						lv_to_6_0,
						"mixin.MyDsl.Cup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='with'
			{
				newLeafNode(otherlv_7, grammarAccess.getMoveAccess().getWithKeyword_7_0());
			}
			otherlv_8='filter'
			{
				newLeafNode(otherlv_8, grammarAccess.getMoveAccess().getFilterKeyword_7_1());
			}
			(
				(
					(
						lv_filter_9_1='A'
						{
							newLeafNode(lv_filter_9_1, grammarAccess.getMoveAccess().getFilterAKeyword_7_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "filter", lv_filter_9_1, null);
						}
						    |
						lv_filter_9_2='B'
						{
							newLeafNode(lv_filter_9_2, grammarAccess.getMoveAccess().getFilterBKeyword_7_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMoveRule());
							}
							setWithLastConsumed($current, "filter", lv_filter_9_2, null);
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleCup
entryRuleCup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCupRule()); }
	iv_ruleCup=ruleCup
	{ $current=$iv_ruleCup.current; }
	EOF;

// Rule Cup
ruleCup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cup'
		{
			newLeafNode(otherlv_0, grammarAccess.getCupAccess().getCupKeyword_0());
		}
		(
			(
				lv_nr_1_0=RULE_INT
				{
					newLeafNode(lv_nr_1_0, grammarAccess.getCupAccess().getNrINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCupRule());
					}
					setWithLastConsumed(
						$current,
						"nr",
						lv_nr_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleClean
entryRuleClean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCleanRule()); }
	iv_ruleClean=ruleClean
	{ $current=$iv_ruleClean.current; }
	EOF;

// Rule Clean
ruleClean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCleanAccess().getCleanAction_0(),
					$current);
			}
		)
		otherlv_1='cleanup'
		{
			newLeafNode(otherlv_1, grammarAccess.getCleanAccess().getCleanupKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
