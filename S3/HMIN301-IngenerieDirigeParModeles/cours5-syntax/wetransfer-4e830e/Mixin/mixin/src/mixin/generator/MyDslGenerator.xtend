/*
 * generated by Xtext 2.18.0.M3
 */
package mixin.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mixin.myDsl.Model
import mixin.myDsl.Instruction
import mixin.myDsl.Move
import mixin.myDsl.Clean

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('Main.java', 
			resource.allContents
				.filter(Model).head.compile())
	}
	
	def String compile(Model model){
		return '''
			import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;
			public class Main extends SVGMixingMachine {

				public int run() {
					//Mettre les instructions
					«FOR instruction : model.instruction»
						«instruction.compile»
					«ENDFOR»
					return 0;
				}
				public static void main(String[] args) throws Exception {
					Main main = new Main();
					for (int i = 1; i <= main.getInputCups(); ++i) {
						main.setAtInputCup(i, 9);
					}
					main.run();
				}
			}''';
	}
	
	def String compile(Instruction i){
		return switch i {
			Move:
				(i as Move).compile
			Clean:
				(i as Clean).compile
			default: '''
				// Unexpected «i.eClass.name»
			'''
		}
	}
	
	def String compile(Move m){
		return '''
		open(0);
		move(«m.from.nr»);
		suck(«m.qty»);
		move(«m.to.nr»);
		blow(«m.qty»);
		''';
	}
	
	def String compile(Clean m){
		return '''''';
	}
}
