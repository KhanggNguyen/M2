/**
 * generated by Xtext 2.18.0.M3
 */
package mixin.generator;

import com.google.common.collect.Iterators;
import mixin.myDsl.Clean;
import mixin.myDsl.Instruction;
import mixin.myDsl.Model;
import mixin.myDsl.Move;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("Main.java", 
      this.compile(IteratorExtensions.<Model>head(Iterators.<Model>filter(resource.getAllContents(), Model.class))));
  }
  
  public String compile(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;");
    _builder.newLine();
    _builder.append("public class Main extends SVGMixingMachine {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int run() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Mettre les instructions");
    _builder.newLine();
    {
      EList<Instruction> _instruction = model.getInstruction();
      for(final Instruction instruction : _instruction) {
        _builder.append("\t\t");
        String _compile = this.compile(instruction);
        _builder.append(_compile, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Main main = new Main();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 1; i <= main.getInputCups(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("main.setAtInputCup(i, 9);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("main.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder.toString();
  }
  
  public String compile(final Instruction i) {
    String _switchResult = null;
    boolean _matched = false;
    if (i instanceof Move) {
      _matched=true;
      _switchResult = this.compile(((Move) i));
    }
    if (!_matched) {
      if (i instanceof Clean) {
        _matched=true;
        _switchResult = this.compile(((Clean) i));
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// Unexpected ");
      String _name = i.eClass().getName();
      _builder.append(_name);
      _builder.newLineIfNotEmpty();
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public String compile(final Move m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("open(0);");
    _builder.newLine();
    _builder.append("move(");
    int _nr = m.getFrom().getNr();
    _builder.append(_nr);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("suck(");
    int _qty = m.getQty();
    _builder.append(_qty);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("move(");
    int _nr_1 = m.getTo().getNr();
    _builder.append(_nr_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("blow(");
    int _qty_1 = m.getQty();
    _builder.append(_qty_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String compile(final Clean m) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
}
